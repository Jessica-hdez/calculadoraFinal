{"version":3,"sources":["App.js","containers/Container.jsx","components/Buttons.jsx","containers/Grid.jsx","components/Screen.jsx","reportWebVitals.js","index.js"],"names":["App","useState","num","setNum","point","setPoint","raiz","numScreen","e","target","value","addValue","concat","calculate","clean","retro","slice","includes","copy","i","length","digit","result","eval","toString","indexOf","cadenaRaiz","j","convertNum","Math","sqrt","parseInt","console","log","error","setTimeout","className","btn","map","boton","Container","children","Buttons","onClick","Grid","Screen","type","placeholder","disabled","id","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kvCAQA,SAASA,MAAM,cAESC,oDAAS,IAFlB,2JAENC,IAFM,cAEDC,OAFC,yBAIaF,qDAAS,GAJtB,4JAING,MAJM,cAICC,SAJD,cAKPC,KAAO,SAGPC,UAAY,SAACC,GACjBL,OAAOK,EAAEC,OAAOC,QAKZC,SAAW,SAACH,GAChB,IAAIE,EAAQF,EAAEC,OAAOC,MACP,MAAVA,EAEEN,QACFC,UAAUD,OACVD,OAAOD,IAAIU,OAAOF,KAED,MAAVA,EACTG,YACmB,MAAVH,GAA2B,MAAVA,GAA2B,MAAVA,GAA0B,MAATA,GAC5DL,UAAUD,OACVD,OAAOD,IAAIU,OAAOF,KACC,MAAVA,EACTI,QACmB,OAAVJ,EACTK,QAEAZ,OAAOD,IAAIU,OAAOF,KAKhBI,MAAQ,WACZX,OAAO,IACPE,UAAS,IAILU,MAAQ,WACZZ,OAAOD,IAAIc,MAAM,GAAI,KAGjBH,UAAY,SAAZA,YACJ,IAEE,GAAIX,IAAIe,SAAS,QAAM,CAErB,IADA,IAAIC,KAAO,GACFC,EAAI,EAAGA,EAAIjB,IAAIkB,OAAQD,IAAK,CACnC,IAAIE,MAAQnB,IAAIiB,GAEdD,MADW,QAATG,MACM,MAEAA,MAGZ,IAAIC,OAASC,KAAKL,MAElBf,OAAOmB,OAAOE,iBACT,GAAItB,IAAIe,SAAS,KAAM,CAE5B,IADA,IAAIC,MAAO,GACFC,GAAI,EAAGA,GAAIjB,IAAIkB,OAAQD,KAAK,CACnC,IAAIE,OAAQnB,IAAIiB,IAEdD,OADW,KAATG,OACM,OAEAA,OAGZ,IAAIC,QAASC,KAAKL,OAClBf,OAAOmB,QAAOE,iBAGX,GAAItB,IAAIuB,QAAQnB,OAAS,EAAG,CAG/B,IAFA,IAAIY,OAAO,GAEFC,IAAI,EAAGA,IAAIjB,IAAIkB,OAAQD,MAE9B,GAAe,WAAXjB,IAAIiB,KAAY,CAGlB,IAFA,IAAIO,WAAa,GAERC,EAAIR,IAAI,EAAGQ,EAAIzB,IAAIkB,OAAQO,IAAK,CAEvC,GAAe,MAAXzB,IAAIyB,IAAyB,MAAXzB,IAAIyB,IAAyB,MAAXzB,IAAIyB,IAAyB,MAAXzB,IAAIyB,GAIzD,CACHR,IAAIQ,EAAE,EACN,MALAD,YAAcxB,IAAIyB,GAQhBA,IAAMzB,IAAIkB,OAAQ,IACpBD,IAAIQ,GAIR,IAAIC,WAAaC,KAAKC,KAAKC,SAASL,aAEpCR,QAAQU,WAAWJ,gBAInBN,QAAQhB,IAAIiB,KAIhB,IAAIG,SAASC,KAAKL,QAClBf,OAAOmB,SAAOE,gBAGX,CACHQ,QAAQC,IAAI/B,KACZ,IAAIoB,SAASC,KAAKrB,KAClBC,OAAOmB,SAAOE,aAIlB,MAAOU,OAEL/B,OAAO,SAEPgC,YAAW,WACPrB,UACD,OAIP,OACE,kEAAKsB,UAAU,MAAf,SACE,4DAAC,qDAAD,WACE,2DAAC,kDAAD,CAAQlC,IAAKA,IAAKK,UAAWA,YAC7B,2DAAC,gDAAD,UACC8B,qDAAIC,KAAI,SAACC,GAAD,OACP,2DAAC,mDAAD,CAASH,UAAWG,EAAMH,UACjB1B,MAAO6B,EAAM7B,MAEbC,SAAUA,UADL4B,EAAM7B,iBASfV,2B,6BC7Jf,gBAUewC,IARG,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAChB,OACI,qBAAKL,UAAU,YAAf,SACKK,M,6BCLb,gBAeeC,IAbC,SAAC,GAAkC,IAAjCN,EAAgC,EAAhCA,UAAW1B,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAEhC,OACI,qBAAKyB,UAAWA,EAAhB,SACI,wBACI1B,MAAOA,EACPiC,QAAShC,EAFb,SAGSD,Q,udCTrB,gBAUekC,IARF,SAAC,GAAgB,IAAfH,EAAc,EAAdA,SACX,OACI,qBAAKL,UAAU,iBAAf,SACKK,M,6BCLb,gBAgBeI,IAdA,SAAC,GAAsB,IAArB3C,EAAoB,EAApBA,IAAKK,EAAe,EAAfA,UAElB,OACI,qBAAK6B,UAAU,SAAf,SACI,uBAAOU,KAAK,OACLC,YAAY,IACZC,UAAQ,EACRC,GAAG,gBACHvC,MAAOR,EACPgD,SAAU3C,Q,gICCd4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC9D,EAAA,EAAD,MAEF+D,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f02facde.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport Container from './containers/Container';\nimport Buttons from './components/Buttons';\nimport {btn} from './API/infoButtons.json'\nimport Grid from './containers/Grid';\nimport Screen from './components/Screen';\n\nfunction App() {\n  //Creación de estado para el valor entrante en pantalla.\n  const [num, setNum] = useState('');\n  //Estado para validación del punto.\n  const [point, setPoint] = useState(true);\n  const raiz = '√';\n\n  //Muestra en pantalla los datos ingresados.\n  const numScreen = (e) => {\n    setNum(e.target.value)\n  }\n\n  //Función que llama el click de cada botón.\n  //Finalidad: Validar el dato que ingresa para ejecutar sus respectivas funciones.\n  const addValue = (e) => {\n    let value = e.target.value\n    if (value === '.') {\n      //Validación si ya hay punto.\n      if (point) {\n        setPoint(!point)\n        setNum(num.concat(value));\n      } else {}\n    } else if (value === '=') {\n      calculate()\n    } else if (value === '+' || value === '-' || value === '*' || value=== '/') {\n      setPoint(!point)\n      setNum(num.concat(value));\n    } else if (value === 'C') {\n      clean()\n    } else if (value === 'CE') {\n      retro()\n    } else {\n      setNum(num.concat(value));\n    }\n  }\n\n  //Estados a su valor inicial.\n  const clean = () => {\n    setNum('');\n    setPoint(true)  \n  }\n\n  //Elimina el último dígito de la cadena.\n  const retro = () => {\n    setNum(num.slice(0, -1))\n  }\n\n  const calculate = () => {\n    try {\n      //Valida si hay potencia.\n      if (num.includes('²')) {\n        let copy = '';\n        for (let i = 0; i < num.length; i++) {\n          let digit = num[i];\n          if (digit == '²') {\n            copy += '**2';\n          } else {\n            copy += digit;\n          }\n        }\n        let result = eval(copy);\n        //Convierte result a string para continuar operandolo.\n        setNum(result.toString())\n      } else if (num.includes('%')) {\n        let copy = '';\n        for (let i = 0; i < num.length; i++) {\n          let digit = num[i];\n          if (digit == '%') {\n            copy += '/100';\n          } else {\n            copy += digit;\n          }\n        }\n        let result = eval(copy);\n        setNum(result.toString())\n      }\n      //Busca la raíz en el estado num.\n      else if (num.indexOf(raiz) >= 0) {\n        let copy = '';\n        //Ciclo para recorrer la cadena num.\n        for (let i = 0; i < num.length; i++) {\n          //Valida si num en el indice i es igual a raíz.\n          if (num[i] === '√') {\n            let cadenaRaiz = '';\n            //Ciclo para recorrer después de el indice de la raíz.\n            for (let j = i + 1; j < num.length; j++) {\n              //Si num[j] NO es un operador agrega los números a cadenaRaiz.\n              if (num[j] !== '+' && num[j] !== '*' && num[j] !== '-' && num[j] !== '/') {\n                cadenaRaiz += num[j];\n              }\n              //Si num[j] es un operador sale ddel ciclo y asigna el valor de j a i.\n              else {\n                i = j-1;\n                break\n              }\n              //Si llegamos al final de la cadena, asignamos j a i para que no continúe el ciclo.\n              if (j === num.length -1) {\n                i = j\n              }\n            }\n            //Asigna a convertNum el resultado de la raíz.\n            let convertNum = Math.sqrt(parseInt(cadenaRaiz))\n            //Agrega a copy el resultado convertido en string.\n            copy += convertNum.toString()\n          }\n          //Valida si num en el indice i NO es igual a raíz.\n          else {\n            copy += num[i]\n          }\n        }\n        //Evaluando copy para después mostrarla en pantalla\n        let result = eval(copy);\n        setNum(result.toString())\n      } \n      //Si no tiene raíz, potencia o porcentaje.\n      else {\n        console.log(num)\n        let result = eval(num);\n        setNum(result.toString())\n      }      \n    }\n    //Manejo del error.\n    catch (error) {\n      //Muestra en pantalla un mensaje de Error.\n      setNum('Error')\n      //Después de 3 segs limpia la pantalla.\n      setTimeout(() => {\n          clean()\n      }, 3000);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Container >\n        <Screen num={num} numScreen={numScreen}/>\n        <Grid>\n        {btn.map((boton) => (\n          <Buttons className={boton.className}\n                   value={boton.value}\n                   key={boton.value}\n                   addValue={addValue} />\n        ))}\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\n\nconst Container = ({children}) => {\n    return (\n        <div className=\"container\">\n            {children}\n        </div>\n    )\n};\n\nexport default Container;","import React from 'react';\n\nconst Buttons = ({className, value, addValue}) => {\n\n    return (\n        <div className={className}>\n            <button\n                value={value}\n                onClick={addValue}>\n                    {value}\n            </button>\n        </div>\n    )\n};\n\nexport default Buttons;","import React from 'react';\n\nconst Grid = ({children}) => {\n    return(\n        <div className=\"grid-container\">\n            {children}\n        </div>\n    )\n};\n\nexport default Grid;","import React from 'react';\n\nconst Screen = ({num, numScreen}) => {\n\n    return (\n        <div className=\"screen\">\n            <input type=\"text\"\n                   placeholder=\"0\"\n                   disabled\n                   id=\"screen-result\"\n                   value={num}\n                   onChange={numScreen}></input>\n        </div>\n    )\n};\n\nexport default Screen;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}